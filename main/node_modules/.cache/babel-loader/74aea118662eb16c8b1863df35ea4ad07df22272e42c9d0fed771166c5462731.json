{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kvmil\\\\Desktop\\\\SpotifyAnalyzer\\\\SpotifyAnalizer\\\\main\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = () => {\n  _s();\n  const {\n    isAuthenticated,\n    isLoading\n  } = useAuth();\n\n  // 1. Jeśli wciąż sprawdzamy status logowania, pokaż informację o ładowaniu\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Sprawdzanie autoryzacji...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 2. Jeśli sprawdzenie się zakończyło i użytkownik JEST zalogowany,\n  //    wyrenderuj komponent potomny (w naszym przypadku DashboardPage)\n  if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this); // <Outlet /> renderuje zagnieżdżone trasy\n  }\n\n  // 3. Jeśli sprawdzenie się zakończyło i użytkownik NIE JEST zalogowany,\n  //    przekieruj go na stronę główną (logowania)\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n_s(ProtectedRoute, \"yb/FJYAIXt7wZoU4a4YvGQ4Nlsc=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","_s","isAuthenticated","isLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/kvmil/Desktop/SpotifyAnalyzer/SpotifyAnalizer/main/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst ProtectedRoute = () => {\r\n  const { isAuthenticated, isLoading } = useAuth();\r\n\r\n  // 1. Jeśli wciąż sprawdzamy status logowania, pokaż informację o ładowaniu\r\n  if (isLoading) {\r\n    return <div className=\"loading\">Sprawdzanie autoryzacji...</div>;\r\n  }\r\n\r\n  // 2. Jeśli sprawdzenie się zakończyło i użytkownik JEST zalogowany,\r\n  //    wyrenderuj komponent potomny (w naszym przypadku DashboardPage)\r\n  if (isAuthenticated) {\r\n    return <Outlet />; // <Outlet /> renderuje zagnieżdżone trasy\r\n  }\r\n\r\n  // 3. Jeśli sprawdzenie się zakończyło i użytkownik NIE JEST zalogowany,\r\n  //    przekieruj go na stronę główną (logowania)\r\n  return <Navigate to=\"/\" />;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC,eAAe;IAAEC;EAAU,CAAC,GAAGN,OAAO,CAAC,CAAC;;EAEhD;EACA,IAAIM,SAAS,EAAE;IACb,oBAAOJ,OAAA;MAAKK,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClE;;EAEA;EACA;EACA,IAAIP,eAAe,EAAE;IACnB,oBAAOH,OAAA,CAACH,MAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EACrB;;EAEA;EACA;EACA,oBAAOV,OAAA,CAACJ,QAAQ;IAACe,EAAE,EAAC;EAAG;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5B,CAAC;AAACR,EAAA,CAjBID,cAAc;EAAA,QACqBH,OAAO;AAAA;AAAAc,EAAA,GAD1CX,cAAc;AAmBpB,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}