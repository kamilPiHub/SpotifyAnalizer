{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kvmil\\\\Desktop\\\\SpotifyAnalyzer\\\\SpotifyAnalizer\\\\main\\\\src\\\\pages\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport './DashboardPage.css';\nimport TrackItem from '../components/TrackItem';\nimport ArtistCard from '../components/ArtistCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiClient = axios.create({\n  baseURL: \"/\",\n  // lub po prostu usuń baseURL\n  withCredentials: true\n});\nconst DashboardPage = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [topTracks, setTopTracks] = useState([]);\n  const [topArtists, setTopArtists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const {\n    logout\n  } = useAuth();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      // 1. Ustawiamy stany początkowe przy rozpoczęciu pobierania danych\n      setIsLoading(true); // Pokazujemy spinner lub komunikat \"Ładowanie...\"\n      setError(''); // Resetujemy poprzednie błędy\n\n      try {\n        // --- Zapytanie o profil użytkownika ---\n\n        // Kluczowa zmiana: dodajemy obiekt { credentials: 'include' } jako drugi argument.\n        // Mówi on przeglądarce, aby dołączyła do tego zapytania ciasteczko sesyjne.\n        const profileRes = await fetch('/api/profile', {\n          credentials: 'include'\n        });\n\n        // Sprawdzamy, czy odpowiedź z serwera jest poprawna (status 2xx).\n        // Jeśli nie jest (np. 401 Unauthorized, 500 Server Error), rzucamy błąd.\n        if (!profileRes.ok) {\n          throw new Error('Błąd autoryzacji. Spróbuj zalogować się ponownie.');\n        }\n\n        // Jeśli wszystko jest OK, przetwarzamy odpowiedź JSON.\n        const profileData = await profileRes.json();\n        setProfile(profileData);\n\n        // --- Zapytanie o topowe utwory (robimy to samo) ---\n\n        // Tutaj również dodajemy { credentials: 'include' }\n        const tracksRes = await fetch('/api/top-tracks', {\n          credentials: 'include'\n        });\n        if (!tracksRes.ok) {\n          throw new Error('Nie udało się pobrać listy najpopularniejszych utworów.');\n        }\n        const tracksData = await tracksRes.json();\n        // Upewniamy się, że `tracksData.items` istnieje, aby uniknąć błędów, gdyby odpowiedź była pusta.\n        setTopTracks(tracksData.items || []);\n      } catch (err) {\n        // 2. Tutaj łapiemy wszystkie błędy rzucone w bloku `try` (np. przez `throw new Error(...)`)\n        // lub błędy sieciowe (np. gdy backend jest wyłączony).\n        setError(err.message);\n\n        // Opcjonalnie: jeśli wystąpił błąd, możemy automatycznie przekierować\n        // użytkownika na stronę logowania po kilku sekundach.\n        setTimeout(() => {\n          window.location.href = '/login';\n        }, 3000);\n      } finally {\n        // 3. Ten blok wykona się zawsze — zarówno po sukcesie, jak i po błędzie.\n        // Dzięki temu mamy pewność, że wskaźnik ładowania zniknie.\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleLogout = async () => {\n    await logout();\n    navigate('/');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"\\u0141adowanie danych...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: user ? `Witaj, ${user.display_name}!` : 'Witaj!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Oto Twoje podsumowanie Spotify.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        className: \"logout-button\",\n        children: \"Wyloguj\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Twoje Top 10 Utwor\\xF3w\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-list\",\n          children: topTracks.map((track, index) => /*#__PURE__*/_jsxDEV(TrackItem, {\n            track: track,\n            index: index + 1\n          }, track.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Twoi Top 10 Arty\\u015Bci\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"artist-grid\",\n          children: topArtists.map(artist => /*#__PURE__*/_jsxDEV(ArtistCard, {\n            artist: artist\n          }, artist.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"rF2iqKdEfiz89RiccE47AAn2Pe0=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","useAuth","TrackItem","ArtistCard","jsxDEV","_jsxDEV","apiClient","create","baseURL","withCredentials","DashboardPage","_s","user","setUser","topTracks","setTopTracks","topArtists","setTopArtists","loading","setLoading","logout","navigate","fetchData","setIsLoading","setError","profileRes","fetch","credentials","ok","Error","profileData","json","setProfile","tracksRes","tracksData","items","err","message","setTimeout","window","location","href","handleLogout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","display_name","onClick","map","track","index","id","artist","_c","$RefreshReg$"],"sources":["C:/Users/kvmil/Desktop/SpotifyAnalyzer/SpotifyAnalizer/main/src/pages/DashboardPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './DashboardPage.css';\r\nimport TrackItem from '../components/TrackItem';\r\nimport ArtistCard from '../components/ArtistCard';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: \"/\", // lub po prostu usuń baseURL\r\n  withCredentials: true,\r\n});\r\n\r\nconst DashboardPage = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [topTracks, setTopTracks] = useState([]);\r\n  const [topArtists, setTopArtists] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  const { logout } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n       const fetchData = async () => {\r\n      // 1. Ustawiamy stany początkowe przy rozpoczęciu pobierania danych\r\n      setIsLoading(true); // Pokazujemy spinner lub komunikat \"Ładowanie...\"\r\n      setError('');      // Resetujemy poprzednie błędy\r\n\r\n      try {\r\n        // --- Zapytanie o profil użytkownika ---\r\n\r\n        // Kluczowa zmiana: dodajemy obiekt { credentials: 'include' } jako drugi argument.\r\n        // Mówi on przeglądarce, aby dołączyła do tego zapytania ciasteczko sesyjne.\r\n        const profileRes = await fetch('/api/profile', { credentials: 'include' });\r\n\r\n        // Sprawdzamy, czy odpowiedź z serwera jest poprawna (status 2xx).\r\n        // Jeśli nie jest (np. 401 Unauthorized, 500 Server Error), rzucamy błąd.\r\n        if (!profileRes.ok) {\r\n          throw new Error('Błąd autoryzacji. Spróbuj zalogować się ponownie.');\r\n        }\r\n        \r\n        // Jeśli wszystko jest OK, przetwarzamy odpowiedź JSON.\r\n        const profileData = await profileRes.json();\r\n        setProfile(profileData);\r\n\r\n\r\n        // --- Zapytanie o topowe utwory (robimy to samo) ---\r\n\r\n        // Tutaj również dodajemy { credentials: 'include' }\r\n        const tracksRes = await fetch('/api/top-tracks', { credentials: 'include' });\r\n\r\n        if (!tracksRes.ok) {\r\n          throw new Error('Nie udało się pobrać listy najpopularniejszych utworów.');\r\n        }\r\n\r\n        const tracksData = await tracksRes.json();\r\n        // Upewniamy się, że `tracksData.items` istnieje, aby uniknąć błędów, gdyby odpowiedź była pusta.\r\n        setTopTracks(tracksData.items || []);\r\n\r\n      } catch (err) {\r\n        // 2. Tutaj łapiemy wszystkie błędy rzucone w bloku `try` (np. przez `throw new Error(...)`)\r\n        // lub błędy sieciowe (np. gdy backend jest wyłączony).\r\n        setError(err.message);\r\n        \r\n        // Opcjonalnie: jeśli wystąpił błąd, możemy automatycznie przekierować\r\n        // użytkownika na stronę logowania po kilku sekundach.\r\n        setTimeout(() => {\r\n            window.location.href = '/login';\r\n        }, 3000);\r\n\r\n      } finally {\r\n        // 3. Ten blok wykona się zawsze — zarówno po sukcesie, jak i po błędzie.\r\n        // Dzięki temu mamy pewność, że wskaźnik ładowania zniknie.\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleLogout = async () => {\r\n    await logout();\r\n    navigate('/');\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Ładowanie danych...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <header className=\"dashboard-header\">\r\n        <h1>{user ? `Witaj, ${user.display_name}!` : 'Witaj!'}</h1>\r\n        <p>Oto Twoje podsumowanie Spotify.</p>\r\n        <button onClick={handleLogout} className=\"logout-button\">Wyloguj</button>\r\n      </header>\r\n\r\n      <div className=\"data-section\">\r\n        <section>\r\n          <h2>Twoje Top 10 Utworów</h2>\r\n          <div className=\"track-list\">\r\n            {topTracks.map((track, index) => (\r\n              <TrackItem key={track.id} track={track} index={index + 1} />\r\n            ))}\r\n          </div>\r\n        </section>\r\n        \r\n        <section>\r\n          <h2>Twoi Top 10 Artyści</h2>\r\n          <div className=\"artist-grid\">\r\n            {topArtists.map((artist) => (\r\n              <ArtistCard key={artist.id} artist={artist} />\r\n            ))}\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}